import {
  Injectable,
  CanActivate,
  ExecutionContext,
  UnprocessableEntityException,
} from '@nestjs/common';
import { Reflector } from '@nestjs/core';
import { ROLES_KEY } from './roles.decorator.ts.notRequired';
import { roleType } from 'src/helper/types/index.type';

@Injectable()
export class RolesGuard implements CanActivate {
  constructor(private reflector: Reflector) {}

  canActivate(context: ExecutionContext): boolean {
    const requiredRoles = this.reflector.getAllAndOverride<roleType[]>(
      ROLES_KEY,
      [context.getHandler(), context.getClass()],
    );
    const { user } = context.switchToHttp().getRequest();

    // Allow access if no roles and no permissions are required
    if (!requiredRoles) {
      return true;
    }

    // Check roles
    if (requiredRoles?.includes(user.role)) {
      return true;
    } else {
      throw new UnprocessableEntityException(
        `Staff with permissions ${user.role} cannot proceed`,
      );
    }
  }
}
